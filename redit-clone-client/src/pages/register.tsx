import React from 'react';
import { Formik, Form} from 'formik';
import { Button, FormControl, FormErrorMessage, FormLabel, Input } from '@chakra-ui/core';
import Wrapper from '../components/wrapper';
import InputField from '../components/InputField';
import { useMutation } from 'urql';
import { useRegisterMutation } from '../generated/graphql';
import { toErrorMap } from '../utils/toErrorMap';
import { useRouter } from 'next/router';
import { withUrqlClient } from 'next-urql';
import { createUrqlClient } from '../utils/createUrqlClient';

interface registerProps { }

// const REGISTER_MUT = `
// mutation Register ($username: String!, $password: String!){
//   register(options:{username:$username, password:$password}){
//     errors{
//       field
//       message
//     }
//     user{
//       username
//       id
//     }
//   }
// }
// `

export const Register: React.FC<registerProps> = ({ }) => {
  const router = useRouter();
  // const [,register] = useMutation(REGISTER_MUT);
  const [,register] = useRegisterMutation(); // useRegisterMutation is a hook generated by GraphQL Code Generator
    return (
        <Wrapper variant="regular">
            <Formik
      initialValues={{ username:"", password:"" }}
      onSubmit={async(values, {setErrors}) => {
        const response = await register(values); // No need to destructure the values object because its values (i.e. username & password) line up with the values being passed in the Register mutation
        if (response.data?.register.errors) {
          setErrors(toErrorMap(response.data.register.errors));
        } else if (response.data?.register.user) {
          router.push('/');
        }
      }}
    >
      {({isSubmitting}) => (
        <Form>
              <InputField name="username" placeholder="Username" label="Username" />
              <InputField name="password" placeholder="Password" label="Password" type="password" />
              <Button mt={5} type="submit" variantColor="teal" isLoading={isSubmitting}>Register</Button>
        </Form>
      )}
    </Formik>
    </Wrapper>
  );
}

export default withUrqlClient(createUrqlClient) (Register);